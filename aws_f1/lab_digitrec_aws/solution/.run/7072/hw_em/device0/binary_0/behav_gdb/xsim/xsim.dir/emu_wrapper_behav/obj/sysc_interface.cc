#pragma GCC diagnostic ignored "-Wdeprecated-declarations" 
#include "xsim.dir/emu_wrapper_behav/obj/sysc_interface.h"
#include <map>
#include <list>


extern "C" { std::map<unsigned int, std::pair<unsigned int, std::list < void*> > > *_glb_hdl_sc_channel_map; } 



extern "C"
    void call_HDL_SC_WRITE(unsigned int netid, int len, char* pval)
    {
        unsigned int data_type = (*_glb_hdl_sc_channel_map)[netid].first;
        std::list<void*> list_of_ch = (*_glb_hdl_sc_channel_map)[netid].second;
        switch (data_type) {
            case 0 /*int*/ : { 
                int val = *((int*)(pval));
                for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                    ((xsim_sc_channel<0,int>*)(*it))->update_from_hdl(val);
                break;
            } 
            case 1 /*bool*/ : { 
                bool val = *((bool*)(pval));
                for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                    ((xsim_sc_channel<0,bool>*)(*it))->update_from_hdl(val);
                break;
            } 
            case 2 /*sc_logic*/ : { 
                sc_dt::sc_logic val  =  (sc_dt::sc_logic_value_t) (((*((int*)(pval)+1) & 0x1) << 1) | (*((int*)(pval)) & 0x1));
                for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                    ((xsim_sc_channel<0, sc_dt::sc_logic>*)(*it))->update_from_hdl(val);
                break;
            } 
            case 3 /*sc_bv*/ : { 
                switch (len) { 
                    case 1 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<1, sc_dt::sc_bv<1> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 2 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<2, sc_dt::sc_bv<2> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 3 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<3, sc_dt::sc_bv<3> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 4 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<4, sc_dt::sc_bv<4> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 6 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<6, sc_dt::sc_bv<6> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 8 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<8, sc_dt::sc_bv<8> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 32 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<32, sc_dt::sc_bv<32> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 36 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<36, sc_dt::sc_bv<36> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 64 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<64, sc_dt::sc_bv<64> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                    case 512 : { 
                        for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                            ((xsim_sc_channel<512, sc_dt::sc_bv<512> >*)(*it))->update_from_hdl(pval);
                        break;
                    }
                        default: 
                            std::cout << "Error, unknown bitvector length: " << len << " NOT supported " << std::endl;
                            assert(0);
                }; 
                break;
            } 
            case 5 /*bit*/ : { 
                sc_dt::sc_bit val  =  (sc_dt::sc_bit)((*((int*)(pval)) & 0x1));
                for ( std::list<void*>::iterator it = list_of_ch.begin(); it != list_of_ch.end(); ++it)
                    ((xsim_sc_channel<0, sc_dt::sc_bit>*)(*it))->update_from_hdl(val);
                break;
            } 
            default: 
                std::cout << "Error, unknown type: " << data_type << " NOT supported " << std::endl;
                assert(0);
        };
    }


extern "C"
    void implicit_HDL_SCinstatiate()
    {
        _glb_hdl_sc_channel_map = new std::map <unsigned int, std::pair<unsigned int, std::list<void*> > > ();
        emu_sim_accel_mon_0_0 *sc_inst_1 = new emu_sim_accel_mon_0_0(".emu_wrapper.emu_i.sim_accel_mon_0");
        xsim_sc_channel<6, sc_dt::sc_bv<6> > *p_1_axi_awaddr = new xsim_sc_channel<6, sc_dt::sc_bv<6> >();
        sc_inst_1->axi_awaddr.bind(*p_1_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29241].first = 3;
        (*_glb_hdl_sc_channel_map)[29241].second.push_front(p_1_axi_awaddr);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_1_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_1->axi_awprot.bind(*p_1_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29242].first = 3;
        (*_glb_hdl_sc_channel_map)[29242].second.push_front(p_1_axi_awprot);
        xsim_sc_channel<0, bool > *p_1_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_awvalid.bind(*p_1_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29244].first = 1;
        (*_glb_hdl_sc_channel_map)[29244].second.push_front(p_1_axi_awvalid);
        xsim_sc_channel<0, bool > *p_1_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_awready.bind(*p_1_axi_awready);
        (*_glb_hdl_sc_channel_map)[29243].first = 1;
        (*_glb_hdl_sc_channel_map)[29243].second.push_front(p_1_axi_awready);
        xsim_sc_channel<32, sc_dt::sc_bv<32> > *p_1_axi_wdata = new xsim_sc_channel<32, sc_dt::sc_bv<32> >();
        sc_inst_1->axi_wdata.bind(*p_1_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29252].first = 3;
        (*_glb_hdl_sc_channel_map)[29252].second.push_front(p_1_axi_wdata);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_1_axi_wstrb = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_1->axi_wstrb.bind(*p_1_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29254].first = 3;
        (*_glb_hdl_sc_channel_map)[29254].second.push_front(p_1_axi_wstrb);
        xsim_sc_channel<0, bool > *p_1_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_wvalid.bind(*p_1_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29255].first = 1;
        (*_glb_hdl_sc_channel_map)[29255].second.push_front(p_1_axi_wvalid);
        xsim_sc_channel<0, bool > *p_1_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_wready.bind(*p_1_axi_wready);
        (*_glb_hdl_sc_channel_map)[29253].first = 1;
        (*_glb_hdl_sc_channel_map)[29253].second.push_front(p_1_axi_wready);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_1_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_1->axi_bresp.bind(*p_1_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29246].first = 3;
        (*_glb_hdl_sc_channel_map)[29246].second.push_front(p_1_axi_bresp);
        xsim_sc_channel<0, bool > *p_1_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_bvalid.bind(*p_1_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29247].first = 1;
        (*_glb_hdl_sc_channel_map)[29247].second.push_front(p_1_axi_bvalid);
        xsim_sc_channel<0, bool > *p_1_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_bready.bind(*p_1_axi_bready);
        (*_glb_hdl_sc_channel_map)[29245].first = 1;
        (*_glb_hdl_sc_channel_map)[29245].second.push_front(p_1_axi_bready);
        xsim_sc_channel<6, sc_dt::sc_bv<6> > *p_1_axi_araddr = new xsim_sc_channel<6, sc_dt::sc_bv<6> >();
        sc_inst_1->axi_araddr.bind(*p_1_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29236].first = 3;
        (*_glb_hdl_sc_channel_map)[29236].second.push_front(p_1_axi_araddr);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_1_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_1->axi_arprot.bind(*p_1_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29238].first = 3;
        (*_glb_hdl_sc_channel_map)[29238].second.push_front(p_1_axi_arprot);
        xsim_sc_channel<0, bool > *p_1_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_arvalid.bind(*p_1_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29240].first = 1;
        (*_glb_hdl_sc_channel_map)[29240].second.push_front(p_1_axi_arvalid);
        xsim_sc_channel<0, bool > *p_1_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_arready.bind(*p_1_axi_arready);
        (*_glb_hdl_sc_channel_map)[29239].first = 1;
        (*_glb_hdl_sc_channel_map)[29239].second.push_front(p_1_axi_arready);
        xsim_sc_channel<32, sc_dt::sc_bv<32> > *p_1_axi_rdata = new xsim_sc_channel<32, sc_dt::sc_bv<32> >();
        sc_inst_1->axi_rdata.bind(*p_1_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29248].first = 3;
        (*_glb_hdl_sc_channel_map)[29248].second.push_front(p_1_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_1_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_1->axi_rresp.bind(*p_1_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29250].first = 3;
        (*_glb_hdl_sc_channel_map)[29250].second.push_front(p_1_axi_rresp);
        xsim_sc_channel<0, bool > *p_1_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_rvalid.bind(*p_1_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29251].first = 1;
        (*_glb_hdl_sc_channel_map)[29251].second.push_front(p_1_axi_rvalid);
        xsim_sc_channel<0, bool > *p_1_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_rready.bind(*p_1_axi_rready);
        (*_glb_hdl_sc_channel_map)[29249].first = 1;
        (*_glb_hdl_sc_channel_map)[29249].second.push_front(p_1_axi_rready);
        xsim_sc_channel<0, bool > *p_1_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_aclk.bind(*p_1_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29235].first = 1;
        (*_glb_hdl_sc_channel_map)[29235].second.push_front(p_1_axi_aclk);
        xsim_sc_channel<0, bool > *p_1_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_1->axi_aresetn.bind(*p_1_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29237].first = 1;
        (*_glb_hdl_sc_channel_map)[29237].second.push_front(p_1_axi_aresetn);
        emu_sim_axi_perf_mon2_0_0 *sc_inst_2 = new emu_sim_axi_perf_mon2_0_0(".emu_wrapper.emu_i.sim_axi_perf_mon2_0");
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_2_axi_awaddr = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_2->axi_awaddr.bind(*p_2_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29269].first = 3;
        (*_glb_hdl_sc_channel_map)[29269].second.push_front(p_2_axi_awaddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_2_axi_awlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_2->axi_awlen.bind(*p_2_axi_awlen);
        (*_glb_hdl_sc_channel_map)[29272].first = 3;
        (*_glb_hdl_sc_channel_map)[29272].second.push_front(p_2_axi_awlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_2_axi_awsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_2->axi_awsize.bind(*p_2_axi_awsize);
        (*_glb_hdl_sc_channel_map)[29278].first = 3;
        (*_glb_hdl_sc_channel_map)[29278].second.push_front(p_2_axi_awsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_2_axi_awburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_2->axi_awburst.bind(*p_2_axi_awburst);
        (*_glb_hdl_sc_channel_map)[29270].first = 3;
        (*_glb_hdl_sc_channel_map)[29270].second.push_front(p_2_axi_awburst);
        xsim_sc_channel<0, bool > *p_2_axi_awlock = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_awlock.bind(*p_2_axi_awlock);
        (*_glb_hdl_sc_channel_map)[29273].first = 1;
        (*_glb_hdl_sc_channel_map)[29273].second.push_front(p_2_axi_awlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_awcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_awcache.bind(*p_2_axi_awcache);
        (*_glb_hdl_sc_channel_map)[29271].first = 3;
        (*_glb_hdl_sc_channel_map)[29271].second.push_front(p_2_axi_awcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_2_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_2->axi_awprot.bind(*p_2_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29274].first = 3;
        (*_glb_hdl_sc_channel_map)[29274].second.push_front(p_2_axi_awprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_awregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_awregion.bind(*p_2_axi_awregion);
        (*_glb_hdl_sc_channel_map)[29277].first = 3;
        (*_glb_hdl_sc_channel_map)[29277].second.push_front(p_2_axi_awregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_awqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_awqos.bind(*p_2_axi_awqos);
        (*_glb_hdl_sc_channel_map)[29275].first = 3;
        (*_glb_hdl_sc_channel_map)[29275].second.push_front(p_2_axi_awqos);
        xsim_sc_channel<0, bool > *p_2_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_awvalid.bind(*p_2_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29279].first = 1;
        (*_glb_hdl_sc_channel_map)[29279].second.push_front(p_2_axi_awvalid);
        xsim_sc_channel<0, bool > *p_2_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_awready.bind(*p_2_axi_awready);
        (*_glb_hdl_sc_channel_map)[29276].first = 1;
        (*_glb_hdl_sc_channel_map)[29276].second.push_front(p_2_axi_awready);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_2_axi_wdata = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_2->axi_wdata.bind(*p_2_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29288].first = 3;
        (*_glb_hdl_sc_channel_map)[29288].second.push_front(p_2_axi_wdata);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_2_axi_wstrb = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_2->axi_wstrb.bind(*p_2_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29291].first = 3;
        (*_glb_hdl_sc_channel_map)[29291].second.push_front(p_2_axi_wstrb);
        xsim_sc_channel<0, bool > *p_2_axi_wlast = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_wlast.bind(*p_2_axi_wlast);
        (*_glb_hdl_sc_channel_map)[29289].first = 1;
        (*_glb_hdl_sc_channel_map)[29289].second.push_front(p_2_axi_wlast);
        xsim_sc_channel<0, bool > *p_2_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_wvalid.bind(*p_2_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29292].first = 1;
        (*_glb_hdl_sc_channel_map)[29292].second.push_front(p_2_axi_wvalid);
        xsim_sc_channel<0, bool > *p_2_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_wready.bind(*p_2_axi_wready);
        (*_glb_hdl_sc_channel_map)[29290].first = 1;
        (*_glb_hdl_sc_channel_map)[29290].second.push_front(p_2_axi_wready);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_2_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_2->axi_bresp.bind(*p_2_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29281].first = 3;
        (*_glb_hdl_sc_channel_map)[29281].second.push_front(p_2_axi_bresp);
        xsim_sc_channel<0, bool > *p_2_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_bvalid.bind(*p_2_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29282].first = 1;
        (*_glb_hdl_sc_channel_map)[29282].second.push_front(p_2_axi_bvalid);
        xsim_sc_channel<0, bool > *p_2_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_bready.bind(*p_2_axi_bready);
        (*_glb_hdl_sc_channel_map)[29280].first = 1;
        (*_glb_hdl_sc_channel_map)[29280].second.push_front(p_2_axi_bready);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_2_axi_araddr = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_2->axi_araddr.bind(*p_2_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29257].first = 3;
        (*_glb_hdl_sc_channel_map)[29257].second.push_front(p_2_axi_araddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_2_axi_arlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_2->axi_arlen.bind(*p_2_axi_arlen);
        (*_glb_hdl_sc_channel_map)[29261].first = 3;
        (*_glb_hdl_sc_channel_map)[29261].second.push_front(p_2_axi_arlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_2_axi_arsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_2->axi_arsize.bind(*p_2_axi_arsize);
        (*_glb_hdl_sc_channel_map)[29267].first = 3;
        (*_glb_hdl_sc_channel_map)[29267].second.push_front(p_2_axi_arsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_2_axi_arburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_2->axi_arburst.bind(*p_2_axi_arburst);
        (*_glb_hdl_sc_channel_map)[29258].first = 3;
        (*_glb_hdl_sc_channel_map)[29258].second.push_front(p_2_axi_arburst);
        xsim_sc_channel<0, bool > *p_2_axi_arlock = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_arlock.bind(*p_2_axi_arlock);
        (*_glb_hdl_sc_channel_map)[29262].first = 1;
        (*_glb_hdl_sc_channel_map)[29262].second.push_front(p_2_axi_arlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_arcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_arcache.bind(*p_2_axi_arcache);
        (*_glb_hdl_sc_channel_map)[29259].first = 3;
        (*_glb_hdl_sc_channel_map)[29259].second.push_front(p_2_axi_arcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_2_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_2->axi_arprot.bind(*p_2_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29263].first = 3;
        (*_glb_hdl_sc_channel_map)[29263].second.push_front(p_2_axi_arprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_arregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_arregion.bind(*p_2_axi_arregion);
        (*_glb_hdl_sc_channel_map)[29266].first = 3;
        (*_glb_hdl_sc_channel_map)[29266].second.push_front(p_2_axi_arregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_2_axi_arqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_2->axi_arqos.bind(*p_2_axi_arqos);
        (*_glb_hdl_sc_channel_map)[29264].first = 3;
        (*_glb_hdl_sc_channel_map)[29264].second.push_front(p_2_axi_arqos);
        xsim_sc_channel<0, bool > *p_2_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_arvalid.bind(*p_2_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29268].first = 1;
        (*_glb_hdl_sc_channel_map)[29268].second.push_front(p_2_axi_arvalid);
        xsim_sc_channel<0, bool > *p_2_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_arready.bind(*p_2_axi_arready);
        (*_glb_hdl_sc_channel_map)[29265].first = 1;
        (*_glb_hdl_sc_channel_map)[29265].second.push_front(p_2_axi_arready);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_2_axi_rdata = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_2->axi_rdata.bind(*p_2_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29283].first = 3;
        (*_glb_hdl_sc_channel_map)[29283].second.push_front(p_2_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_2_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_2->axi_rresp.bind(*p_2_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29286].first = 3;
        (*_glb_hdl_sc_channel_map)[29286].second.push_front(p_2_axi_rresp);
        xsim_sc_channel<0, bool > *p_2_axi_rlast = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_rlast.bind(*p_2_axi_rlast);
        (*_glb_hdl_sc_channel_map)[29284].first = 1;
        (*_glb_hdl_sc_channel_map)[29284].second.push_front(p_2_axi_rlast);
        xsim_sc_channel<0, bool > *p_2_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_rvalid.bind(*p_2_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29287].first = 1;
        (*_glb_hdl_sc_channel_map)[29287].second.push_front(p_2_axi_rvalid);
        xsim_sc_channel<0, bool > *p_2_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_rready.bind(*p_2_axi_rready);
        (*_glb_hdl_sc_channel_map)[29285].first = 1;
        (*_glb_hdl_sc_channel_map)[29285].second.push_front(p_2_axi_rready);
        xsim_sc_channel<0, bool > *p_2_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_aclk.bind(*p_2_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29256].first = 1;
        (*_glb_hdl_sc_channel_map)[29256].second.push_front(p_2_axi_aclk);
        xsim_sc_channel<0, bool > *p_2_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_2->axi_aresetn.bind(*p_2_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29260].first = 1;
        (*_glb_hdl_sc_channel_map)[29260].second.push_front(p_2_axi_aresetn);
        emu_sim_axi_perf_mon_0_0 *sc_inst_3 = new emu_sim_axi_perf_mon_0_0(".emu_wrapper.emu_i.sim_axi_perf_mon_0");
        xsim_sc_channel<1, sc_dt::sc_bv<1> > *p_3_axi_awid = new xsim_sc_channel<1, sc_dt::sc_bv<1> >();
        sc_inst_3->axi_awid.bind(*p_3_axi_awid);
        (*_glb_hdl_sc_channel_map)[29310].first = 3;
        (*_glb_hdl_sc_channel_map)[29310].second.push_front(p_3_axi_awid);
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_3_axi_awaddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_3->axi_awaddr.bind(*p_3_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29307].first = 3;
        (*_glb_hdl_sc_channel_map)[29307].second.push_front(p_3_axi_awaddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_3_axi_awlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_3->axi_awlen.bind(*p_3_axi_awlen);
        (*_glb_hdl_sc_channel_map)[29311].first = 3;
        (*_glb_hdl_sc_channel_map)[29311].second.push_front(p_3_axi_awlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_3_axi_awsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_3->axi_awsize.bind(*p_3_axi_awsize);
        (*_glb_hdl_sc_channel_map)[29317].first = 3;
        (*_glb_hdl_sc_channel_map)[29317].second.push_front(p_3_axi_awsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_3_axi_awburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_3->axi_awburst.bind(*p_3_axi_awburst);
        (*_glb_hdl_sc_channel_map)[29308].first = 3;
        (*_glb_hdl_sc_channel_map)[29308].second.push_front(p_3_axi_awburst);
        xsim_sc_channel<0, bool > *p_3_axi_awlock = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_awlock.bind(*p_3_axi_awlock);
        (*_glb_hdl_sc_channel_map)[29312].first = 1;
        (*_glb_hdl_sc_channel_map)[29312].second.push_front(p_3_axi_awlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_awcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_awcache.bind(*p_3_axi_awcache);
        (*_glb_hdl_sc_channel_map)[29309].first = 3;
        (*_glb_hdl_sc_channel_map)[29309].second.push_front(p_3_axi_awcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_3_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_3->axi_awprot.bind(*p_3_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29313].first = 3;
        (*_glb_hdl_sc_channel_map)[29313].second.push_front(p_3_axi_awprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_awregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_awregion.bind(*p_3_axi_awregion);
        (*_glb_hdl_sc_channel_map)[29316].first = 3;
        (*_glb_hdl_sc_channel_map)[29316].second.push_front(p_3_axi_awregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_awqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_awqos.bind(*p_3_axi_awqos);
        (*_glb_hdl_sc_channel_map)[29314].first = 3;
        (*_glb_hdl_sc_channel_map)[29314].second.push_front(p_3_axi_awqos);
        xsim_sc_channel<0, bool > *p_3_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_awvalid.bind(*p_3_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29318].first = 1;
        (*_glb_hdl_sc_channel_map)[29318].second.push_front(p_3_axi_awvalid);
        xsim_sc_channel<0, bool > *p_3_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_awready.bind(*p_3_axi_awready);
        (*_glb_hdl_sc_channel_map)[29315].first = 1;
        (*_glb_hdl_sc_channel_map)[29315].second.push_front(p_3_axi_awready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_3_axi_wdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_3->axi_wdata.bind(*p_3_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29329].first = 3;
        (*_glb_hdl_sc_channel_map)[29329].second.push_front(p_3_axi_wdata);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_3_axi_wstrb = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_3->axi_wstrb.bind(*p_3_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29332].first = 3;
        (*_glb_hdl_sc_channel_map)[29332].second.push_front(p_3_axi_wstrb);
        xsim_sc_channel<0, bool > *p_3_axi_wlast = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_wlast.bind(*p_3_axi_wlast);
        (*_glb_hdl_sc_channel_map)[29330].first = 1;
        (*_glb_hdl_sc_channel_map)[29330].second.push_front(p_3_axi_wlast);
        xsim_sc_channel<0, bool > *p_3_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_wvalid.bind(*p_3_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29333].first = 1;
        (*_glb_hdl_sc_channel_map)[29333].second.push_front(p_3_axi_wvalid);
        xsim_sc_channel<0, bool > *p_3_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_wready.bind(*p_3_axi_wready);
        (*_glb_hdl_sc_channel_map)[29331].first = 1;
        (*_glb_hdl_sc_channel_map)[29331].second.push_front(p_3_axi_wready);
        xsim_sc_channel<1, sc_dt::sc_bv<1> > *p_3_axi_bid = new xsim_sc_channel<1, sc_dt::sc_bv<1> >();
        sc_inst_3->axi_bid.bind(*p_3_axi_bid);
        (*_glb_hdl_sc_channel_map)[29319].first = 3;
        (*_glb_hdl_sc_channel_map)[29319].second.push_front(p_3_axi_bid);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_3_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_3->axi_bresp.bind(*p_3_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29321].first = 3;
        (*_glb_hdl_sc_channel_map)[29321].second.push_front(p_3_axi_bresp);
        xsim_sc_channel<0, bool > *p_3_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_bvalid.bind(*p_3_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29322].first = 1;
        (*_glb_hdl_sc_channel_map)[29322].second.push_front(p_3_axi_bvalid);
        xsim_sc_channel<0, bool > *p_3_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_bready.bind(*p_3_axi_bready);
        (*_glb_hdl_sc_channel_map)[29320].first = 1;
        (*_glb_hdl_sc_channel_map)[29320].second.push_front(p_3_axi_bready);
        xsim_sc_channel<1, sc_dt::sc_bv<1> > *p_3_axi_arid = new xsim_sc_channel<1, sc_dt::sc_bv<1> >();
        sc_inst_3->axi_arid.bind(*p_3_axi_arid);
        (*_glb_hdl_sc_channel_map)[29298].first = 3;
        (*_glb_hdl_sc_channel_map)[29298].second.push_front(p_3_axi_arid);
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_3_axi_araddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_3->axi_araddr.bind(*p_3_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29294].first = 3;
        (*_glb_hdl_sc_channel_map)[29294].second.push_front(p_3_axi_araddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_3_axi_arlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_3->axi_arlen.bind(*p_3_axi_arlen);
        (*_glb_hdl_sc_channel_map)[29299].first = 3;
        (*_glb_hdl_sc_channel_map)[29299].second.push_front(p_3_axi_arlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_3_axi_arsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_3->axi_arsize.bind(*p_3_axi_arsize);
        (*_glb_hdl_sc_channel_map)[29305].first = 3;
        (*_glb_hdl_sc_channel_map)[29305].second.push_front(p_3_axi_arsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_3_axi_arburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_3->axi_arburst.bind(*p_3_axi_arburst);
        (*_glb_hdl_sc_channel_map)[29295].first = 3;
        (*_glb_hdl_sc_channel_map)[29295].second.push_front(p_3_axi_arburst);
        xsim_sc_channel<0, bool > *p_3_axi_arlock = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_arlock.bind(*p_3_axi_arlock);
        (*_glb_hdl_sc_channel_map)[29300].first = 1;
        (*_glb_hdl_sc_channel_map)[29300].second.push_front(p_3_axi_arlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_arcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_arcache.bind(*p_3_axi_arcache);
        (*_glb_hdl_sc_channel_map)[29296].first = 3;
        (*_glb_hdl_sc_channel_map)[29296].second.push_front(p_3_axi_arcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_3_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_3->axi_arprot.bind(*p_3_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29301].first = 3;
        (*_glb_hdl_sc_channel_map)[29301].second.push_front(p_3_axi_arprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_arregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_arregion.bind(*p_3_axi_arregion);
        (*_glb_hdl_sc_channel_map)[29304].first = 3;
        (*_glb_hdl_sc_channel_map)[29304].second.push_front(p_3_axi_arregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_3_axi_arqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_3->axi_arqos.bind(*p_3_axi_arqos);
        (*_glb_hdl_sc_channel_map)[29302].first = 3;
        (*_glb_hdl_sc_channel_map)[29302].second.push_front(p_3_axi_arqos);
        xsim_sc_channel<0, bool > *p_3_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_arvalid.bind(*p_3_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29306].first = 1;
        (*_glb_hdl_sc_channel_map)[29306].second.push_front(p_3_axi_arvalid);
        xsim_sc_channel<0, bool > *p_3_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_arready.bind(*p_3_axi_arready);
        (*_glb_hdl_sc_channel_map)[29303].first = 1;
        (*_glb_hdl_sc_channel_map)[29303].second.push_front(p_3_axi_arready);
        xsim_sc_channel<1, sc_dt::sc_bv<1> > *p_3_axi_rid = new xsim_sc_channel<1, sc_dt::sc_bv<1> >();
        sc_inst_3->axi_rid.bind(*p_3_axi_rid);
        (*_glb_hdl_sc_channel_map)[29324].first = 3;
        (*_glb_hdl_sc_channel_map)[29324].second.push_front(p_3_axi_rid);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_3_axi_rdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_3->axi_rdata.bind(*p_3_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29323].first = 3;
        (*_glb_hdl_sc_channel_map)[29323].second.push_front(p_3_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_3_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_3->axi_rresp.bind(*p_3_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29327].first = 3;
        (*_glb_hdl_sc_channel_map)[29327].second.push_front(p_3_axi_rresp);
        xsim_sc_channel<0, bool > *p_3_axi_rlast = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_rlast.bind(*p_3_axi_rlast);
        (*_glb_hdl_sc_channel_map)[29325].first = 1;
        (*_glb_hdl_sc_channel_map)[29325].second.push_front(p_3_axi_rlast);
        xsim_sc_channel<0, bool > *p_3_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_rvalid.bind(*p_3_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29328].first = 1;
        (*_glb_hdl_sc_channel_map)[29328].second.push_front(p_3_axi_rvalid);
        xsim_sc_channel<0, bool > *p_3_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_rready.bind(*p_3_axi_rready);
        (*_glb_hdl_sc_channel_map)[29326].first = 1;
        (*_glb_hdl_sc_channel_map)[29326].second.push_front(p_3_axi_rready);
        xsim_sc_channel<0, bool > *p_3_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_aclk.bind(*p_3_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29293].first = 1;
        (*_glb_hdl_sc_channel_map)[29293].second.push_front(p_3_axi_aclk);
        xsim_sc_channel<0, bool > *p_3_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_3->axi_aresetn.bind(*p_3_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29297].first = 1;
        (*_glb_hdl_sc_channel_map)[29297].second.push_front(p_3_axi_aresetn);
        emu_sim_axi_perf_mon_1_0 *sc_inst_4 = new emu_sim_axi_perf_mon_1_0(".emu_wrapper.emu_i.sim_axi_perf_mon_1");
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_4_axi_awaddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_4->axi_awaddr.bind(*p_4_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29347].first = 3;
        (*_glb_hdl_sc_channel_map)[29347].second.push_front(p_4_axi_awaddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_4_axi_awlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_4->axi_awlen.bind(*p_4_axi_awlen);
        (*_glb_hdl_sc_channel_map)[29350].first = 3;
        (*_glb_hdl_sc_channel_map)[29350].second.push_front(p_4_axi_awlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_4_axi_awsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_4->axi_awsize.bind(*p_4_axi_awsize);
        (*_glb_hdl_sc_channel_map)[29356].first = 3;
        (*_glb_hdl_sc_channel_map)[29356].second.push_front(p_4_axi_awsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_4_axi_awburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_4->axi_awburst.bind(*p_4_axi_awburst);
        (*_glb_hdl_sc_channel_map)[29348].first = 3;
        (*_glb_hdl_sc_channel_map)[29348].second.push_front(p_4_axi_awburst);
        xsim_sc_channel<0, bool > *p_4_axi_awlock = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_awlock.bind(*p_4_axi_awlock);
        (*_glb_hdl_sc_channel_map)[29351].first = 1;
        (*_glb_hdl_sc_channel_map)[29351].second.push_front(p_4_axi_awlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_awcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_awcache.bind(*p_4_axi_awcache);
        (*_glb_hdl_sc_channel_map)[29349].first = 3;
        (*_glb_hdl_sc_channel_map)[29349].second.push_front(p_4_axi_awcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_4_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_4->axi_awprot.bind(*p_4_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29352].first = 3;
        (*_glb_hdl_sc_channel_map)[29352].second.push_front(p_4_axi_awprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_awregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_awregion.bind(*p_4_axi_awregion);
        (*_glb_hdl_sc_channel_map)[29355].first = 3;
        (*_glb_hdl_sc_channel_map)[29355].second.push_front(p_4_axi_awregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_awqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_awqos.bind(*p_4_axi_awqos);
        (*_glb_hdl_sc_channel_map)[29353].first = 3;
        (*_glb_hdl_sc_channel_map)[29353].second.push_front(p_4_axi_awqos);
        xsim_sc_channel<0, bool > *p_4_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_awvalid.bind(*p_4_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29357].first = 1;
        (*_glb_hdl_sc_channel_map)[29357].second.push_front(p_4_axi_awvalid);
        xsim_sc_channel<0, bool > *p_4_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_awready.bind(*p_4_axi_awready);
        (*_glb_hdl_sc_channel_map)[29354].first = 1;
        (*_glb_hdl_sc_channel_map)[29354].second.push_front(p_4_axi_awready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_4_axi_wdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_4->axi_wdata.bind(*p_4_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29366].first = 3;
        (*_glb_hdl_sc_channel_map)[29366].second.push_front(p_4_axi_wdata);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_4_axi_wstrb = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_4->axi_wstrb.bind(*p_4_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29369].first = 3;
        (*_glb_hdl_sc_channel_map)[29369].second.push_front(p_4_axi_wstrb);
        xsim_sc_channel<0, bool > *p_4_axi_wlast = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_wlast.bind(*p_4_axi_wlast);
        (*_glb_hdl_sc_channel_map)[29367].first = 1;
        (*_glb_hdl_sc_channel_map)[29367].second.push_front(p_4_axi_wlast);
        xsim_sc_channel<0, bool > *p_4_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_wvalid.bind(*p_4_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29370].first = 1;
        (*_glb_hdl_sc_channel_map)[29370].second.push_front(p_4_axi_wvalid);
        xsim_sc_channel<0, bool > *p_4_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_wready.bind(*p_4_axi_wready);
        (*_glb_hdl_sc_channel_map)[29368].first = 1;
        (*_glb_hdl_sc_channel_map)[29368].second.push_front(p_4_axi_wready);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_4_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_4->axi_bresp.bind(*p_4_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29359].first = 3;
        (*_glb_hdl_sc_channel_map)[29359].second.push_front(p_4_axi_bresp);
        xsim_sc_channel<0, bool > *p_4_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_bvalid.bind(*p_4_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29360].first = 1;
        (*_glb_hdl_sc_channel_map)[29360].second.push_front(p_4_axi_bvalid);
        xsim_sc_channel<0, bool > *p_4_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_bready.bind(*p_4_axi_bready);
        (*_glb_hdl_sc_channel_map)[29358].first = 1;
        (*_glb_hdl_sc_channel_map)[29358].second.push_front(p_4_axi_bready);
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_4_axi_araddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_4->axi_araddr.bind(*p_4_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29335].first = 3;
        (*_glb_hdl_sc_channel_map)[29335].second.push_front(p_4_axi_araddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_4_axi_arlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_4->axi_arlen.bind(*p_4_axi_arlen);
        (*_glb_hdl_sc_channel_map)[29339].first = 3;
        (*_glb_hdl_sc_channel_map)[29339].second.push_front(p_4_axi_arlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_4_axi_arsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_4->axi_arsize.bind(*p_4_axi_arsize);
        (*_glb_hdl_sc_channel_map)[29345].first = 3;
        (*_glb_hdl_sc_channel_map)[29345].second.push_front(p_4_axi_arsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_4_axi_arburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_4->axi_arburst.bind(*p_4_axi_arburst);
        (*_glb_hdl_sc_channel_map)[29336].first = 3;
        (*_glb_hdl_sc_channel_map)[29336].second.push_front(p_4_axi_arburst);
        xsim_sc_channel<0, bool > *p_4_axi_arlock = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_arlock.bind(*p_4_axi_arlock);
        (*_glb_hdl_sc_channel_map)[29340].first = 1;
        (*_glb_hdl_sc_channel_map)[29340].second.push_front(p_4_axi_arlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_arcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_arcache.bind(*p_4_axi_arcache);
        (*_glb_hdl_sc_channel_map)[29337].first = 3;
        (*_glb_hdl_sc_channel_map)[29337].second.push_front(p_4_axi_arcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_4_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_4->axi_arprot.bind(*p_4_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29341].first = 3;
        (*_glb_hdl_sc_channel_map)[29341].second.push_front(p_4_axi_arprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_arregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_arregion.bind(*p_4_axi_arregion);
        (*_glb_hdl_sc_channel_map)[29344].first = 3;
        (*_glb_hdl_sc_channel_map)[29344].second.push_front(p_4_axi_arregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_4_axi_arqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_4->axi_arqos.bind(*p_4_axi_arqos);
        (*_glb_hdl_sc_channel_map)[29342].first = 3;
        (*_glb_hdl_sc_channel_map)[29342].second.push_front(p_4_axi_arqos);
        xsim_sc_channel<0, bool > *p_4_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_arvalid.bind(*p_4_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29346].first = 1;
        (*_glb_hdl_sc_channel_map)[29346].second.push_front(p_4_axi_arvalid);
        xsim_sc_channel<0, bool > *p_4_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_arready.bind(*p_4_axi_arready);
        (*_glb_hdl_sc_channel_map)[29343].first = 1;
        (*_glb_hdl_sc_channel_map)[29343].second.push_front(p_4_axi_arready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_4_axi_rdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_4->axi_rdata.bind(*p_4_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29361].first = 3;
        (*_glb_hdl_sc_channel_map)[29361].second.push_front(p_4_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_4_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_4->axi_rresp.bind(*p_4_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29364].first = 3;
        (*_glb_hdl_sc_channel_map)[29364].second.push_front(p_4_axi_rresp);
        xsim_sc_channel<0, bool > *p_4_axi_rlast = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_rlast.bind(*p_4_axi_rlast);
        (*_glb_hdl_sc_channel_map)[29362].first = 1;
        (*_glb_hdl_sc_channel_map)[29362].second.push_front(p_4_axi_rlast);
        xsim_sc_channel<0, bool > *p_4_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_rvalid.bind(*p_4_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29365].first = 1;
        (*_glb_hdl_sc_channel_map)[29365].second.push_front(p_4_axi_rvalid);
        xsim_sc_channel<0, bool > *p_4_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_rready.bind(*p_4_axi_rready);
        (*_glb_hdl_sc_channel_map)[29363].first = 1;
        (*_glb_hdl_sc_channel_map)[29363].second.push_front(p_4_axi_rready);
        xsim_sc_channel<0, bool > *p_4_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_aclk.bind(*p_4_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29334].first = 1;
        (*_glb_hdl_sc_channel_map)[29334].second.push_front(p_4_axi_aclk);
        xsim_sc_channel<0, bool > *p_4_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_4->axi_aresetn.bind(*p_4_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29338].first = 1;
        (*_glb_hdl_sc_channel_map)[29338].second.push_front(p_4_axi_aresetn);
        emu_sim_axi_perf_mon_2_0 *sc_inst_5 = new emu_sim_axi_perf_mon_2_0(".emu_wrapper.emu_i.sim_axi_perf_mon_2");
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_5_axi_awaddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_5->axi_awaddr.bind(*p_5_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29384].first = 3;
        (*_glb_hdl_sc_channel_map)[29384].second.push_front(p_5_axi_awaddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_5_axi_awlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_5->axi_awlen.bind(*p_5_axi_awlen);
        (*_glb_hdl_sc_channel_map)[29387].first = 3;
        (*_glb_hdl_sc_channel_map)[29387].second.push_front(p_5_axi_awlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_5_axi_awsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_5->axi_awsize.bind(*p_5_axi_awsize);
        (*_glb_hdl_sc_channel_map)[29393].first = 3;
        (*_glb_hdl_sc_channel_map)[29393].second.push_front(p_5_axi_awsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_5_axi_awburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_5->axi_awburst.bind(*p_5_axi_awburst);
        (*_glb_hdl_sc_channel_map)[29385].first = 3;
        (*_glb_hdl_sc_channel_map)[29385].second.push_front(p_5_axi_awburst);
        xsim_sc_channel<0, bool > *p_5_axi_awlock = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_awlock.bind(*p_5_axi_awlock);
        (*_glb_hdl_sc_channel_map)[29388].first = 1;
        (*_glb_hdl_sc_channel_map)[29388].second.push_front(p_5_axi_awlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_awcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_awcache.bind(*p_5_axi_awcache);
        (*_glb_hdl_sc_channel_map)[29386].first = 3;
        (*_glb_hdl_sc_channel_map)[29386].second.push_front(p_5_axi_awcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_5_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_5->axi_awprot.bind(*p_5_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29389].first = 3;
        (*_glb_hdl_sc_channel_map)[29389].second.push_front(p_5_axi_awprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_awregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_awregion.bind(*p_5_axi_awregion);
        (*_glb_hdl_sc_channel_map)[29392].first = 3;
        (*_glb_hdl_sc_channel_map)[29392].second.push_front(p_5_axi_awregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_awqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_awqos.bind(*p_5_axi_awqos);
        (*_glb_hdl_sc_channel_map)[29390].first = 3;
        (*_glb_hdl_sc_channel_map)[29390].second.push_front(p_5_axi_awqos);
        xsim_sc_channel<0, bool > *p_5_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_awvalid.bind(*p_5_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29394].first = 1;
        (*_glb_hdl_sc_channel_map)[29394].second.push_front(p_5_axi_awvalid);
        xsim_sc_channel<0, bool > *p_5_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_awready.bind(*p_5_axi_awready);
        (*_glb_hdl_sc_channel_map)[29391].first = 1;
        (*_glb_hdl_sc_channel_map)[29391].second.push_front(p_5_axi_awready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_5_axi_wdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_5->axi_wdata.bind(*p_5_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29403].first = 3;
        (*_glb_hdl_sc_channel_map)[29403].second.push_front(p_5_axi_wdata);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_5_axi_wstrb = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_5->axi_wstrb.bind(*p_5_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29406].first = 3;
        (*_glb_hdl_sc_channel_map)[29406].second.push_front(p_5_axi_wstrb);
        xsim_sc_channel<0, bool > *p_5_axi_wlast = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_wlast.bind(*p_5_axi_wlast);
        (*_glb_hdl_sc_channel_map)[29404].first = 1;
        (*_glb_hdl_sc_channel_map)[29404].second.push_front(p_5_axi_wlast);
        xsim_sc_channel<0, bool > *p_5_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_wvalid.bind(*p_5_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29407].first = 1;
        (*_glb_hdl_sc_channel_map)[29407].second.push_front(p_5_axi_wvalid);
        xsim_sc_channel<0, bool > *p_5_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_wready.bind(*p_5_axi_wready);
        (*_glb_hdl_sc_channel_map)[29405].first = 1;
        (*_glb_hdl_sc_channel_map)[29405].second.push_front(p_5_axi_wready);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_5_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_5->axi_bresp.bind(*p_5_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29396].first = 3;
        (*_glb_hdl_sc_channel_map)[29396].second.push_front(p_5_axi_bresp);
        xsim_sc_channel<0, bool > *p_5_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_bvalid.bind(*p_5_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29397].first = 1;
        (*_glb_hdl_sc_channel_map)[29397].second.push_front(p_5_axi_bvalid);
        xsim_sc_channel<0, bool > *p_5_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_bready.bind(*p_5_axi_bready);
        (*_glb_hdl_sc_channel_map)[29395].first = 1;
        (*_glb_hdl_sc_channel_map)[29395].second.push_front(p_5_axi_bready);
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_5_axi_araddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_5->axi_araddr.bind(*p_5_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29372].first = 3;
        (*_glb_hdl_sc_channel_map)[29372].second.push_front(p_5_axi_araddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_5_axi_arlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_5->axi_arlen.bind(*p_5_axi_arlen);
        (*_glb_hdl_sc_channel_map)[29376].first = 3;
        (*_glb_hdl_sc_channel_map)[29376].second.push_front(p_5_axi_arlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_5_axi_arsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_5->axi_arsize.bind(*p_5_axi_arsize);
        (*_glb_hdl_sc_channel_map)[29382].first = 3;
        (*_glb_hdl_sc_channel_map)[29382].second.push_front(p_5_axi_arsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_5_axi_arburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_5->axi_arburst.bind(*p_5_axi_arburst);
        (*_glb_hdl_sc_channel_map)[29373].first = 3;
        (*_glb_hdl_sc_channel_map)[29373].second.push_front(p_5_axi_arburst);
        xsim_sc_channel<0, bool > *p_5_axi_arlock = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_arlock.bind(*p_5_axi_arlock);
        (*_glb_hdl_sc_channel_map)[29377].first = 1;
        (*_glb_hdl_sc_channel_map)[29377].second.push_front(p_5_axi_arlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_arcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_arcache.bind(*p_5_axi_arcache);
        (*_glb_hdl_sc_channel_map)[29374].first = 3;
        (*_glb_hdl_sc_channel_map)[29374].second.push_front(p_5_axi_arcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_5_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_5->axi_arprot.bind(*p_5_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29378].first = 3;
        (*_glb_hdl_sc_channel_map)[29378].second.push_front(p_5_axi_arprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_arregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_arregion.bind(*p_5_axi_arregion);
        (*_glb_hdl_sc_channel_map)[29381].first = 3;
        (*_glb_hdl_sc_channel_map)[29381].second.push_front(p_5_axi_arregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_5_axi_arqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_5->axi_arqos.bind(*p_5_axi_arqos);
        (*_glb_hdl_sc_channel_map)[29379].first = 3;
        (*_glb_hdl_sc_channel_map)[29379].second.push_front(p_5_axi_arqos);
        xsim_sc_channel<0, bool > *p_5_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_arvalid.bind(*p_5_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29383].first = 1;
        (*_glb_hdl_sc_channel_map)[29383].second.push_front(p_5_axi_arvalid);
        xsim_sc_channel<0, bool > *p_5_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_arready.bind(*p_5_axi_arready);
        (*_glb_hdl_sc_channel_map)[29380].first = 1;
        (*_glb_hdl_sc_channel_map)[29380].second.push_front(p_5_axi_arready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_5_axi_rdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_5->axi_rdata.bind(*p_5_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29398].first = 3;
        (*_glb_hdl_sc_channel_map)[29398].second.push_front(p_5_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_5_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_5->axi_rresp.bind(*p_5_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29401].first = 3;
        (*_glb_hdl_sc_channel_map)[29401].second.push_front(p_5_axi_rresp);
        xsim_sc_channel<0, bool > *p_5_axi_rlast = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_rlast.bind(*p_5_axi_rlast);
        (*_glb_hdl_sc_channel_map)[29399].first = 1;
        (*_glb_hdl_sc_channel_map)[29399].second.push_front(p_5_axi_rlast);
        xsim_sc_channel<0, bool > *p_5_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_rvalid.bind(*p_5_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29402].first = 1;
        (*_glb_hdl_sc_channel_map)[29402].second.push_front(p_5_axi_rvalid);
        xsim_sc_channel<0, bool > *p_5_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_rready.bind(*p_5_axi_rready);
        (*_glb_hdl_sc_channel_map)[29400].first = 1;
        (*_glb_hdl_sc_channel_map)[29400].second.push_front(p_5_axi_rready);
        xsim_sc_channel<0, bool > *p_5_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_aclk.bind(*p_5_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29371].first = 1;
        (*_glb_hdl_sc_channel_map)[29371].second.push_front(p_5_axi_aclk);
        xsim_sc_channel<0, bool > *p_5_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_5->axi_aresetn.bind(*p_5_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29375].first = 1;
        (*_glb_hdl_sc_channel_map)[29375].second.push_front(p_5_axi_aresetn);
        emu_sim_axi_perf_mon_3_0 *sc_inst_6 = new emu_sim_axi_perf_mon_3_0(".emu_wrapper.emu_i.sim_axi_perf_mon_3");
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_6_axi_awaddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_6->axi_awaddr.bind(*p_6_axi_awaddr);
        (*_glb_hdl_sc_channel_map)[29421].first = 3;
        (*_glb_hdl_sc_channel_map)[29421].second.push_front(p_6_axi_awaddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_6_axi_awlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_6->axi_awlen.bind(*p_6_axi_awlen);
        (*_glb_hdl_sc_channel_map)[29424].first = 3;
        (*_glb_hdl_sc_channel_map)[29424].second.push_front(p_6_axi_awlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_6_axi_awsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_6->axi_awsize.bind(*p_6_axi_awsize);
        (*_glb_hdl_sc_channel_map)[29430].first = 3;
        (*_glb_hdl_sc_channel_map)[29430].second.push_front(p_6_axi_awsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_6_axi_awburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_6->axi_awburst.bind(*p_6_axi_awburst);
        (*_glb_hdl_sc_channel_map)[29422].first = 3;
        (*_glb_hdl_sc_channel_map)[29422].second.push_front(p_6_axi_awburst);
        xsim_sc_channel<0, bool > *p_6_axi_awlock = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_awlock.bind(*p_6_axi_awlock);
        (*_glb_hdl_sc_channel_map)[29425].first = 1;
        (*_glb_hdl_sc_channel_map)[29425].second.push_front(p_6_axi_awlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_awcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_awcache.bind(*p_6_axi_awcache);
        (*_glb_hdl_sc_channel_map)[29423].first = 3;
        (*_glb_hdl_sc_channel_map)[29423].second.push_front(p_6_axi_awcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_6_axi_awprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_6->axi_awprot.bind(*p_6_axi_awprot);
        (*_glb_hdl_sc_channel_map)[29426].first = 3;
        (*_glb_hdl_sc_channel_map)[29426].second.push_front(p_6_axi_awprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_awregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_awregion.bind(*p_6_axi_awregion);
        (*_glb_hdl_sc_channel_map)[29429].first = 3;
        (*_glb_hdl_sc_channel_map)[29429].second.push_front(p_6_axi_awregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_awqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_awqos.bind(*p_6_axi_awqos);
        (*_glb_hdl_sc_channel_map)[29427].first = 3;
        (*_glb_hdl_sc_channel_map)[29427].second.push_front(p_6_axi_awqos);
        xsim_sc_channel<0, bool > *p_6_axi_awvalid = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_awvalid.bind(*p_6_axi_awvalid);
        (*_glb_hdl_sc_channel_map)[29431].first = 1;
        (*_glb_hdl_sc_channel_map)[29431].second.push_front(p_6_axi_awvalid);
        xsim_sc_channel<0, bool > *p_6_axi_awready = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_awready.bind(*p_6_axi_awready);
        (*_glb_hdl_sc_channel_map)[29428].first = 1;
        (*_glb_hdl_sc_channel_map)[29428].second.push_front(p_6_axi_awready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_6_axi_wdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_6->axi_wdata.bind(*p_6_axi_wdata);
        (*_glb_hdl_sc_channel_map)[29440].first = 3;
        (*_glb_hdl_sc_channel_map)[29440].second.push_front(p_6_axi_wdata);
        xsim_sc_channel<64, sc_dt::sc_bv<64> > *p_6_axi_wstrb = new xsim_sc_channel<64, sc_dt::sc_bv<64> >();
        sc_inst_6->axi_wstrb.bind(*p_6_axi_wstrb);
        (*_glb_hdl_sc_channel_map)[29443].first = 3;
        (*_glb_hdl_sc_channel_map)[29443].second.push_front(p_6_axi_wstrb);
        xsim_sc_channel<0, bool > *p_6_axi_wlast = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_wlast.bind(*p_6_axi_wlast);
        (*_glb_hdl_sc_channel_map)[29441].first = 1;
        (*_glb_hdl_sc_channel_map)[29441].second.push_front(p_6_axi_wlast);
        xsim_sc_channel<0, bool > *p_6_axi_wvalid = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_wvalid.bind(*p_6_axi_wvalid);
        (*_glb_hdl_sc_channel_map)[29444].first = 1;
        (*_glb_hdl_sc_channel_map)[29444].second.push_front(p_6_axi_wvalid);
        xsim_sc_channel<0, bool > *p_6_axi_wready = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_wready.bind(*p_6_axi_wready);
        (*_glb_hdl_sc_channel_map)[29442].first = 1;
        (*_glb_hdl_sc_channel_map)[29442].second.push_front(p_6_axi_wready);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_6_axi_bresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_6->axi_bresp.bind(*p_6_axi_bresp);
        (*_glb_hdl_sc_channel_map)[29433].first = 3;
        (*_glb_hdl_sc_channel_map)[29433].second.push_front(p_6_axi_bresp);
        xsim_sc_channel<0, bool > *p_6_axi_bvalid = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_bvalid.bind(*p_6_axi_bvalid);
        (*_glb_hdl_sc_channel_map)[29434].first = 1;
        (*_glb_hdl_sc_channel_map)[29434].second.push_front(p_6_axi_bvalid);
        xsim_sc_channel<0, bool > *p_6_axi_bready = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_bready.bind(*p_6_axi_bready);
        (*_glb_hdl_sc_channel_map)[29432].first = 1;
        (*_glb_hdl_sc_channel_map)[29432].second.push_front(p_6_axi_bready);
        xsim_sc_channel<36, sc_dt::sc_bv<36> > *p_6_axi_araddr = new xsim_sc_channel<36, sc_dt::sc_bv<36> >();
        sc_inst_6->axi_araddr.bind(*p_6_axi_araddr);
        (*_glb_hdl_sc_channel_map)[29409].first = 3;
        (*_glb_hdl_sc_channel_map)[29409].second.push_front(p_6_axi_araddr);
        xsim_sc_channel<8, sc_dt::sc_bv<8> > *p_6_axi_arlen = new xsim_sc_channel<8, sc_dt::sc_bv<8> >();
        sc_inst_6->axi_arlen.bind(*p_6_axi_arlen);
        (*_glb_hdl_sc_channel_map)[29413].first = 3;
        (*_glb_hdl_sc_channel_map)[29413].second.push_front(p_6_axi_arlen);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_6_axi_arsize = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_6->axi_arsize.bind(*p_6_axi_arsize);
        (*_glb_hdl_sc_channel_map)[29419].first = 3;
        (*_glb_hdl_sc_channel_map)[29419].second.push_front(p_6_axi_arsize);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_6_axi_arburst = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_6->axi_arburst.bind(*p_6_axi_arburst);
        (*_glb_hdl_sc_channel_map)[29410].first = 3;
        (*_glb_hdl_sc_channel_map)[29410].second.push_front(p_6_axi_arburst);
        xsim_sc_channel<0, bool > *p_6_axi_arlock = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_arlock.bind(*p_6_axi_arlock);
        (*_glb_hdl_sc_channel_map)[29414].first = 1;
        (*_glb_hdl_sc_channel_map)[29414].second.push_front(p_6_axi_arlock);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_arcache = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_arcache.bind(*p_6_axi_arcache);
        (*_glb_hdl_sc_channel_map)[29411].first = 3;
        (*_glb_hdl_sc_channel_map)[29411].second.push_front(p_6_axi_arcache);
        xsim_sc_channel<3, sc_dt::sc_bv<3> > *p_6_axi_arprot = new xsim_sc_channel<3, sc_dt::sc_bv<3> >();
        sc_inst_6->axi_arprot.bind(*p_6_axi_arprot);
        (*_glb_hdl_sc_channel_map)[29415].first = 3;
        (*_glb_hdl_sc_channel_map)[29415].second.push_front(p_6_axi_arprot);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_arregion = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_arregion.bind(*p_6_axi_arregion);
        (*_glb_hdl_sc_channel_map)[29418].first = 3;
        (*_glb_hdl_sc_channel_map)[29418].second.push_front(p_6_axi_arregion);
        xsim_sc_channel<4, sc_dt::sc_bv<4> > *p_6_axi_arqos = new xsim_sc_channel<4, sc_dt::sc_bv<4> >();
        sc_inst_6->axi_arqos.bind(*p_6_axi_arqos);
        (*_glb_hdl_sc_channel_map)[29416].first = 3;
        (*_glb_hdl_sc_channel_map)[29416].second.push_front(p_6_axi_arqos);
        xsim_sc_channel<0, bool > *p_6_axi_arvalid = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_arvalid.bind(*p_6_axi_arvalid);
        (*_glb_hdl_sc_channel_map)[29420].first = 1;
        (*_glb_hdl_sc_channel_map)[29420].second.push_front(p_6_axi_arvalid);
        xsim_sc_channel<0, bool > *p_6_axi_arready = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_arready.bind(*p_6_axi_arready);
        (*_glb_hdl_sc_channel_map)[29417].first = 1;
        (*_glb_hdl_sc_channel_map)[29417].second.push_front(p_6_axi_arready);
        xsim_sc_channel<512, sc_dt::sc_bv<512> > *p_6_axi_rdata = new xsim_sc_channel<512, sc_dt::sc_bv<512> >();
        sc_inst_6->axi_rdata.bind(*p_6_axi_rdata);
        (*_glb_hdl_sc_channel_map)[29435].first = 3;
        (*_glb_hdl_sc_channel_map)[29435].second.push_front(p_6_axi_rdata);
        xsim_sc_channel<2, sc_dt::sc_bv<2> > *p_6_axi_rresp = new xsim_sc_channel<2, sc_dt::sc_bv<2> >();
        sc_inst_6->axi_rresp.bind(*p_6_axi_rresp);
        (*_glb_hdl_sc_channel_map)[29438].first = 3;
        (*_glb_hdl_sc_channel_map)[29438].second.push_front(p_6_axi_rresp);
        xsim_sc_channel<0, bool > *p_6_axi_rlast = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_rlast.bind(*p_6_axi_rlast);
        (*_glb_hdl_sc_channel_map)[29436].first = 1;
        (*_glb_hdl_sc_channel_map)[29436].second.push_front(p_6_axi_rlast);
        xsim_sc_channel<0, bool > *p_6_axi_rvalid = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_rvalid.bind(*p_6_axi_rvalid);
        (*_glb_hdl_sc_channel_map)[29439].first = 1;
        (*_glb_hdl_sc_channel_map)[29439].second.push_front(p_6_axi_rvalid);
        xsim_sc_channel<0, bool > *p_6_axi_rready = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_rready.bind(*p_6_axi_rready);
        (*_glb_hdl_sc_channel_map)[29437].first = 1;
        (*_glb_hdl_sc_channel_map)[29437].second.push_front(p_6_axi_rready);
        xsim_sc_channel<0, bool > *p_6_axi_aclk = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_aclk.bind(*p_6_axi_aclk);
        (*_glb_hdl_sc_channel_map)[29408].first = 1;
        (*_glb_hdl_sc_channel_map)[29408].second.push_front(p_6_axi_aclk);
        xsim_sc_channel<0, bool > *p_6_axi_aresetn = new xsim_sc_channel<0, bool >();
        sc_inst_6->axi_aresetn.bind(*p_6_axi_aresetn);
        (*_glb_hdl_sc_channel_map)[29412].first = 1;
        (*_glb_hdl_sc_channel_map)[29412].second.push_front(p_6_axi_aresetn);
    }
